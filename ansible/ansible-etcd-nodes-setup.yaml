---
- name: Setup /etc/hosts for etcd servers
  hosts: kube_etcd_servers,kube_api_servers
  any_errors_fatal: true
  become: true
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Update /etc/hosts with etcd server entries
      lineinfile:
        path: /etc/hosts
        line: "{{ item }} {{ cluster_config.cluster_name }}-etcd-{{ hostvars[item].etcd_index }}"
        state: present
      loop: "{{ groups['kube_etcd_servers'] }}"
      when: hostvars[item] is defined
      tags:
        - etc_hosts

- name: Setup etcd kubelet configs
  hosts: kube_etcd_servers
  any_errors_fatal: true
  become: true
  gather_facts: true
  tasks:
    - name: Ensure kubelet service directory exists
      ansible.builtin.file:
        path: /etc/systemd/system/kubelet.service.d/
        state: directory
        mode: '0755'
      tags:
        - etcd_kubelet_config
    - name: Create kubelet configuration file
      ansible.builtin.copy:
        dest: /etc/systemd/system/kubelet.service.d/kubelet.conf
        content: |
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: false
          authorization:
            mode: AlwaysAllow
          cgroupDriver: systemd
          address: 127.0.0.1
          containerRuntimeEndpoint: unix:///var/run/containerd/containerd.sock
          staticPodPath: /etc/kubernetes/manifests
        mode: '0644'
      tags:
        - etcd_kubelet_config
    - name: Create kubelet service override configuration
      ansible.builtin.copy:
        dest: /etc/systemd/system/kubelet.service.d/20-etcd-service-manager.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/kubelet --config=/etc/systemd/system/kubelet.service.d/kubelet.conf
          Restart=always
        mode: '0644'
      tags:
        - etcd_kubelet_config
    - name: Reload systemd daemon to apply changes
      ansible.builtin.systemd:
        daemon_reload: yes
      tags:
        - etcd_kubelet_config
    - name: Restart kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
        enabled: yes
      tags:
        - etcd_kubelet_config

- name: Generate kubeadmcfg.yaml for each etcd host and generate a certificate authority
  hosts: kube_etcd_servers[0] # Ensures these tasks run on only the first etcd server
  any_errors_fatal: true
  become: true
  tasks:
    - name: Generate initial cluster string
      set_fact:
        initial_cluster: "{% for host in groups['kube_etcd_servers'] %}{{ hostvars[host].hostname }}=https://{{ host }}:2380{% if not loop.last %},{% endif %}{% endfor %}"
      run_once: true
      tags: etcd_cluster_config
    - name: Create temporary directories to store config files
      file:
        path: "/tmp/{{ host }}/"
        state: directory
      loop: "{{ groups['kube_etcd_servers'] }}"
      loop_control:
        loop_var: host
      tags:
        - etcd_cluster_config
    - name: Generate kubeadmcfg.yaml for each etcd host
      template:
        src: helpers/kubeadm_etcd_config.yaml.j2
        dest: "/tmp/{{ item }}/kubeadmcfg.yaml"
      loop: "{{ groups['kube_etcd_servers'] }}"
      tags:
        - etcd_cluster_config

    - name: Generate etcd certificate authority
      command: kubeadm init phase certs etcd-ca
      run_once: true
      tags:
        - etcd_cert_generation

- name: Setup configs for other etcd nodes
  become: true
  any_errors_fatal: true
  hosts: kube_etcd_servers[0] # Commands run on the first etcd server
  tasks:
    - name: Generate certificates for other etcd nodes
      loop: "{{ groups['kube_etcd_servers'] | difference([groups['kube_etcd_servers'][0]]) }}"
      loop_control:
        loop_var: host
      include_tasks: helpers/ansible_etcd_cert_creation.yaml
      tags:
        - etcd_cert_generation
    - name: Cleanup non-reusable certificates in /etc/kubernetes/pki after generation for other etcd nodes
      become: true
      command: find /etc/kubernetes/pki -not -name ca.crt -not -name ca.key -type f -delete
      run_once: true
      tags:
        - etcd_cert_generation
- name: Setup config for etcd node 1
  become: true
  any_errors_fatal: true
  hosts: kube_etcd_servers[0] # Commands run on the first etcd server
  tasks:
    - name: Generate certificates for etcd node 1
      block:
        - name: Generate etcd-server certificates for node 1
          command: kubeadm init phase certs etcd-server --config=/tmp/{{ groups['kube_etcd_servers'][0] }}/kubeadmcfg.yaml
        - name: Generate etcd-peer certificates for node 1
          command: kubeadm init phase certs etcd-peer --config=/tmp/{{ groups['kube_etcd_servers'][0] }}/kubeadmcfg.yaml
        - name: Generate etcd-healthcheck-client certificates for node 1
          command: kubeadm init phase certs etcd-healthcheck-client --config=/tmp/{{ groups['kube_etcd_servers'][0] }}/kubeadmcfg.yaml
        - name: Generate apiserver-etcd-client certificates for node 1
          command: kubeadm init phase certs apiserver-etcd-client --config=/tmp/{{ groups['kube_etcd_servers'][0] }}/kubeadmcfg.yaml
      tags:
        - etcd_cert_generation

- name: Copy root SSH key to the first etcd server
  hosts: kube_etcd_servers[0]
  gather_facts: no
  become: yes
  tags:
    - ssh_key_copy
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
    root_ssh_key_local_path: "{{ ssh_key_file }}"
  tasks:
    - name: Ensure .ssh directory exists for root
      ansible.builtin.file:
        path: "/root/.ssh"
        state: directory
        mode: '0700'
        owner: root
        group: root
    - name: Copy root SSH key to target node
      ansible.builtin.copy:
        src: "{{ root_ssh_key_local_path }}"
        dest: "/root/.ssh/ssh_key"
        owner: root
        group: root
        mode: '0600'

- name: Ensure specific directories and files do not exist on other etcd nodes
  hosts: kube_etcd_servers[1:]
  any_errors_fatal: true
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Remove the PKI directory if it exists
      ansible.builtin.file:
        path: "{{ cluster_config.ssh.ssh_home }}/pki"
        state: absent
      become: true
      tags:
        - etcd_cert_copy
    - name: Remove the kubeadmcfg.yaml file if it exists
      ansible.builtin.file:
        path: "{{ cluster_config.ssh.ssh_home }}/kubeadmcfg.yaml"
        state: absent
      become: true
      tags:
        - etcd_cert_copy
    - name: Remove /etc/kubernetes/pki dir if it exists
      ansible.builtin.file:
        path: "/etc/kubernetes/pki"
        state: absent
      become: true
      tags:
        - etcd_cert_copy
    - name: Ensure /etc/kubernetes dir exists
      ansible.builtin.file:
        path: "/etc/kubernetes"
        state: directory
      become: true
      tags:
        - etcd_cert_copy
- name: Synchronize PKI directories from the first etcd node to others
  hosts: kube_etcd_servers[0]  # Running tasks from the first etcd node
  any_errors_fatal: true
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Adjust permissions on PKI files for synchronization on the first node
      ansible.builtin.file:
        path: "/tmp/{{ item }}/pki"
        mode: 'u+r,g+r,o+r'  # Adds read permission for user, group, and others
        recurse: yes
      loop: "{{ groups['kube_etcd_servers'][1:] }}"
      become: true
      tags:
        - etcd_cert_copy
    - name: Copy PKI directory to each etcd node
      ansible.builtin.shell:
        cmd: "scp -i /root/.ssh/ssh_key -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /tmp/{{ item }}/* {{ cluster_config.ssh.ssh_user }}@{{ item }}:~/"
      loop: "{{ groups['kube_etcd_servers'][1:] }}"
      become: true
      tags:
        - etcd_cert_copy
- name: Correct ownership and relocate PKI directories on other etcd nodes
  hosts: kube_etcd_servers[1:]
  any_errors_fatal: true
  gather_facts: false
  become: true # Execute tasks with elevated privileges
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Set correct permissions for PKI files and directories
      ansible.builtin.shell: |
        find {{ cluster_config.ssh.ssh_home }}/pki -type f -exec chmod 600 {} \;
      tags:
        - etcd_cert_copy
    - name: Ensure root ownership of the PKI directory
      ansible.builtin.file:
        path: "{{ cluster_config.ssh.ssh_home }}/pki"
        owner: root
        group: root
        recurse: true
      tags:
        - etcd_cert_copy
    - name: Move PKI directory to /etc/kubernetes
      ansible.builtin.command: "mv -f {{ cluster_config.ssh.ssh_home }}/pki /etc/kubernetes/"
      become: true
      tags:
        - etcd_cert_copy

- name: Initialize etcd on the first etcd node
  hosts: kube_etcd_servers[0]
  any_errors_fatal: true
  gather_facts: false
  tasks:
    - name: Initialize etcd with specific configuration
      ansible.builtin.command: sudo kubeadm init phase etcd local --config=/tmp/{{ groups['kube_etcd_servers'][0] }}/kubeadmcfg.yaml
      become: true
      tags:
        - etcd_init
- name: Create static pod manifests on the second and third etcd nodes
  hosts: kube_etcd_servers[1:]
  any_errors_fatal: true
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Initialize etcd with specific configuration
      ansible.builtin.command: sudo kubeadm init phase etcd local --config={{ cluster_config.ssh.ssh_home }}/kubeadmcfg.yaml
      become: true
      tags:
        - etcd_init

- name: Transfer PKI files to the control plane and organize them
  hosts: kube_etcd_servers[0]  # Assuming this playbook runs on the first etcd node
  any_errors_fatal: true
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Copy ca.crt to the control plane node
      ansible.builtin.shell:
        cmd: "scp -i /root/.ssh/ssh_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /etc/kubernetes/pki/etcd/ca.crt {{ cluster_config.ssh.ssh_user }}@{{ groups['kube_api_servers'][0] }}:{{ cluster_config.ssh.ssh_home }}/ca.crt"
      become: true
      when: groups['kube_etcd_servers'] | default([]) | length > 0
      tags:
        - kubeadm_config_copy
    - name: Copy apiserver-etcd-client.crt to the control plane node
      ansible.builtin.shell:
        cmd: "scp -i /root/.ssh/ssh_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /etc/kubernetes/pki/apiserver-etcd-client.crt {{ cluster_config.ssh.ssh_user }}@{{ groups['kube_api_servers'][0] }}:{{ cluster_config.ssh.ssh_home }}/apiserver-etcd-client.crt"
      become: true
      when: groups['kube_etcd_servers'] | default([]) | length > 0
      tags:
        - kubeadm_config_copy
    - name: Copy apiserver-etcd-client.key to the control plane node
      ansible.builtin.shell:
        cmd: "scp -i /root/.ssh/ssh_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /etc/kubernetes/pki/apiserver-etcd-client.key {{ cluster_config.ssh.ssh_user }}@{{ groups['kube_api_servers'][0] }}:{{ cluster_config.ssh.ssh_home }}/apiserver-etcd-client.key"
      become: true
      when: groups['kube_etcd_servers'] | default([]) | length > 0
      tags:
        - kubeadm_config_copy
- name: Prepare and organize PKI files on the first control plane node
  hosts: kube_api_servers[0]  # Targeting the first control plane server
  any_errors_fatal: true
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Ensure PKI directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0600'
      loop:
        - "/etc/kubernetes/pki"
        - "/etc/kubernetes/pki/etcd"
      become: true
      when: groups['kube_etcd_servers'] | default([]) | length > 0
      tags:
        - kubeadm_config_copy
    - name: Move apiserver-etcd-client.crt and apiserver-etcd-client.key to /etc/kubernetes/pki
      ansible.builtin.shell:
        cmd: sudo mv {{ cluster_config.ssh.ssh_home }}/apiserver-etcd-client.crt {{ cluster_config.ssh.ssh_home }}/apiserver-etcd-client.key /etc/kubernetes/pki/
      become: true
      when: groups['kube_etcd_servers'] | default([]) | length > 0
      tags:
        - kubeadm_config_copy
    - name: Move ca.crt to /etc/kubernetes/pki/etcd
      ansible.builtin.shell:
        cmd: sudo mv {{ cluster_config.ssh.ssh_home }}/ca.crt /etc/kubernetes/pki/etcd/
      become: true
      when: groups['kube_etcd_servers'] | default([]) | length > 0
      tags:
        - kubeadm_config_copy
    - name: Clean up etcd folder
      ansible.builtin.file:
        path: "{{ cluster_config.ssh.ssh_home }}/etcd"
        state: absent
      become: true
      when: groups['kube_etcd_servers'] | default([]) | length > 0
      tags:
        - kubeadm_config_copy

- name: Remove SSH private key from root's .ssh directory
  hosts: kube_etcd_servers[0]
  any_errors_fatal: true
  gather_facts: false
  tasks:
    - name: Remove SSH private key
      ansible.builtin.file:
        path: "/root/.ssh/ssh_key"
        state: absent
      become: true
      tags:
        - remove_ssh_key

- name: Etcdctl healthcheck
  hosts: kube_etcd_servers[0]
  any_errors_fatal: true
  gather_facts: false
  become: true
  tags:
    - etcd_healthcheck
  tasks:
    - name: Pause for 30s to give etcd cluster time to start
      ansible.builtin.pause:
        seconds: 30
      when: not etcdctl_exists.stat.exists
    - name: Check health for each etcd endpoint
      ansible.builtin.shell: |
          ETCDCTL_API=3 etcdctl \
          --cert /etc/kubernetes/pki/etcd/peer.crt \
          --key /etc/kubernetes/pki/etcd/peer.key \
          --cacert /etc/kubernetes/pki/etcd/ca.crt \
          --endpoints https://{{ host }}:2379 endpoint health
      loop: "{{ groups['kube_etcd_servers'] }}"
      loop_control:
        loop_var: host
      register: etcd_health_check
      ignore_errors: yes
    - name: Show etcd health check output
      ansible.builtin.debug:
        msg: "{{ etcd_health_check.results | map(attribute='stdout') | list }}"
      when: etcd_health_check is defined









