---
- name: Ensure template was created correctly
  hosts: all
  tags:
    - ensure_space
  tasks:
    - name: Find all matching firstboot log files
      find:
        paths: "/var/log"
        patterns: "template-firstboot-*.log"
      register: log_files
    - name: Check each firstboot log file for 'No space left' text
      shell: "grep 'No space left' {{ item.path }}"
      register: grep_output
      failed_when: grep_output.rc == 0
      with_items: "{{ log_files.files }}"
      ignore_errors: true
      no_log: true
    - name: Fail the play if 'No space left' is found in any firstboot log file
      fail:
        msg: "'No space left' found in firstboot log files. Template VM did not have enough space to install all packages. Increase the TEMPLATE_DISK_SIZE and re-create template, then recreate this cluster."
      when: grep_output.results | selectattr('rc', 'equalto', 0) | list | count > 0
    - name: Check each firstboot log file for 'Error' or 'Fatal' text, case-insensitively, ignoring specific patterns
      shell: |
        grep -iE 'Error|Fatal' {{ item.path }} | grep -vE 'mysql/error.log|errors = false|liberror'
      # add exclusions here^
      register: grep_output
      failed_when: grep_output.rc == 0
      with_items: "{{ log_files.files }}"
      ignore_errors: true
      no_log: true
    - name: Warn and pause if 'Error' or 'Fatal' is found in any firstboot log files, excluding specific instances
      pause:
        prompt: "Warning: 'Error' or 'Fatal' found in firstboot log files. Template VM may have an issue with its firstboot scripts. Investigate /var/log/template-firstboot-*.log files and, if needed, recreate the template and this cluster. You can add exclusions in playbook if necessary. Press enter to ignore this warning or Ctrl+C to abort."
      when: grep_output.results | selectattr('rc', 'equalto', 0) | list | count > 0

- name: Prepare nodes
  hosts: all
  any_errors_fatal: true
  become: true  # This ensures all tasks are run with elevated privileges
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Configure kubelet with the correct interface IP
      shell: |
        local_ip="$(ip --json addr show eth0 | jq -r '.[0].addr_info[] | select(.family == "inet") | .local')"
        echo "KUBELET_EXTRA_ARGS=\"--node-ip=${local_ip} --max-pods={{ cluster_config.cluster_networking.max_pods_per_node }}\"" | sudo tee /etc/default/kubelet
      args:
        executable: /bin/bash
      tags:
        - kubelet_node_ip

    - name: Set correct locale
      shell: |
        echo "LANG=en_US.UTF-8
        LANGUAGE=en_US" > /etc/default/locale
        localectl set-locale LANG=en_US.UTF-8
        touch /var/lib/cloud/instance/locale-check.skip
      args:
        executable: /bin/bash
      tags:
        - set_locale

    - name: Set helpful aliases
      shell: |
        echo "alias k='kubectl'" | tee -a {{ cluster_config.ssh.ssh_home }}/.bashrc
        echo "alias c='clear'" | tee -a {{ cluster_config.ssh.ssh_home }}/.bashrc
        echo "alias h='history'" | tee -a {{ cluster_config.ssh.ssh_home }}/.bashrc
      args:
        executable: /bin/bash
      tags:
        - set_aliases

    - name: Move scripts from root directory to user directory
      shell: |
        cp /root/*.sh {{ cluster_config.ssh.ssh_home }}/
        chmod +x {{ cluster_config.ssh.ssh_home }}/*.sh
      args:
        executable: /bin/bash
      become: true
      tags:
        - copy_scripts

    - name: Add VIP and hostname to /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ cluster_config.kube_vip.vip }} {{ cluster_config.kube_vip.vip_hostname }}"
        create: yes
      tags: etc_hosts
    - name: Add VIP and hostname to cloud templates (if exists)
      ansible.builtin.lineinfile:
        path: /etc/cloud/templates/hosts.debian.tmpl
        line: "{{ cluster_config.kube_vip.vip }} {{ cluster_config.kube_vip.vip_hostname }}"
        create: yes
      when: ansible_facts['os_family'] == "Debian"
      tags: etc_hosts
    - name: Update /etc/hosts with node entries
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
        state: present
      loop: "{{ groups['all'] }}"
      tags:
        - etc_hosts
    - name: Update /etc/hosts with node entries to cloud templates (if exists)
      ansible.builtin.lineinfile:
        path: /etc/cloud/templates/hosts.debian.tmpl
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
        state: present
      loop: "{{ groups['all'] }}"
      when: ansible_facts['os_family'] == "Debian"
      tags:
        - etc_hosts
